
#ifndef GSM_UART_H
#define GSM_UART_H

void Trio_GsmTask();
void Trio_Init_GSM_UART();

#define IMSI_LEN      15
#define IMEI_LEN      15

#define VERSION_T2

#ifndef VERSION_T2
#define VERSION_T0
#endif
#define  SECURITY_ENABLED_CHAR     ':'

#define  MODULE_ATTACHED_TO_NETWORK      0
#define  GSM_NETWORK_ERROR     			 1
#define  MODULE_CONNECTED_TO_SERVER      2
#define  ERROR_CONNECTING_TO_SERVER      3
#define  SOCKET_CLOSED                   4

typedef struct GSM_INFO
{
	int csq;
	uint8_t imei_no[IMEI_LEN + 1];
	uint8_t imsi_no[IMSI_LEN + 1];
	bool b_connectedToServer;
}GSM_INFO_T;

typedef struct RECV_DATA {
	char data[256];
	uint16_t length;
}RECV_DATA_T;

typedef enum GSM_DATA_TYPE{
	DATA_TYPE_NO_DATA,
	DATA_TYPE_IMEI_NUMBER,
	DATA_TYPE_IMSI_NUMBER
}GSM_DATA_TYPE_T;

typedef enum {
#ifdef VERSION_T2
    GSM_TASK_WAIT_PWRKEY_LOW_STATE,
#endif
	GSM_TASK_MODULE_STARTUP_STATE,
	GSM_TASK_WAIT_TURN_ON_TIME_AFTER_RESET_STATE,
	GSM_TASK_WAIT_HARD_RESET_DELAY_STATE,
	GSM_TASK_WAIT_OK_AFTER_DISABLE_ECHO_COMMAND_STATE,
	GSM_TASK_WAIT_BATTERY_LEVEL_MESSAGE_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_CMER_COMMAND_STATE,
	GSM_TASK_WAIT_PIN_STATUS_RESPONSE_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_READ_IMEI_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_READ_IMSI_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_TEXT_MODE_SMS_COMMAND_STATE,
	GSM_TASK_WAIT_OK_AFTER_RESET_COMMAND_STATE,
	GSM_TASK_WAIT_GSM_REGISTRATION_STATE,
	GSM_TASK_WAIT_SIM_READY_DELAY_STATE,
	GSM_TASK_WAIT_SET_SMS_UNSOLICITED_RESULT_CODE_RESPONSE_STATE,
}GSM_TASK_INIT_STATE;
/*******************************************************/
typedef enum{
	GSM_TASK_CREATE_PDP_CONTEXT_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_DEFINE_PDP_CONTEXT_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_SCFG_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_SKIPESC_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_SGACT_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_SCFGEXT_COMMAND_STATE,
	GSM_TASK_WAIT_OK_RESPONSE_AFTER_SD_COMMAND_STATE,
	GSM_TASK_ATTACH_TO_GPRS,
	GSM_TASK_WAIT_ATTACH_TO_GPRS_STATE,
	GSM_TASK_SET_SOCKET_CONFIG_STATE,
	GSM_TASK_WAIT_SOCKET_ACTIVATION_STATE,
	GSM_TASK_WAIT_SERVER_CONNECTION_STATE,
	GSM_TASK_CHECK_NEW_SMS_RECEIVED_STATE,
}GSM_TASK_CONNECTING_STATE;

typedef enum {
	GSM_TASK_SEND_MESSAGE_STATE,
	GSM_TASK_SEND_ST_MESSAGE_STATE,
	GSM_TASK_WAIT_SEND_DATA_PROMPT_STATE,
	GSM_TASK_WAIT_OK_AFTER_SEND_DATA_STATE,
	GSM_TASK_WAIT_IDLE_IN_CONNECTED_STATE
}GSM_TASK_CONNECTED_STATE;


/*******************************************************/
typedef enum {
	MODULE_INITIALIZING_STATE,
	MODULE_CONNECTING_TO_SERVER_STATE,
	MODULE_CONNECTED_TO_SERVER_STATE
}GSM_MODULE_STATE;

/* function prototypes*/
void Get_GsmInfo(GSM_INFO_T *const );
void Set_GsmResetPinFunction(uint8_t pin_number);
void DeassertGsmResetPin(void);
bool GetServerConnectionStatus();

#endif /*GSM_UART_H*/
