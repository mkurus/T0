/*
 * Settings.c

 *
 *  Created on: 30 Tem 2015
 *      Author: admin
 */

#include "board.h"
#include "settings.h"
#include "spi.h"
#include "utils.h"
#include "sst25.h"
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

COMMAND_TYPE_T Get_ConfigurationCommand(char *buffer);

void Get_ConfigurationParameter(char const *, char *);

uint8_t update_server_and_port_setting(char const *buffer);
uint8_t update_message_period_setting(char const *buffer);
uint8_t update_roaming_setting(char const *buffer);
uint8_t update_sms_act_setting(char const *buffer);
uint8_t update_speed_limit_setting(char const *buffer);
uint8_t update_engine_blockage_setting(char const *buffer);
uint8_t update_km_counter_setting(char const *buffer);
uint8_t update_device_id(char const *buffer);
uint8_t reset_device(char const *buffer);
uint8_t request_device_status(char const *buffer);
uint8_t uncontrolled_engine_blockage(char const *buffer);
uint8_t location_request(char const *buffer);
uint8_t update_apn_setting(char const *buffer);
uint8_t update_password(char const *buffer);

void read_flash_parameter(uint16_t offset, uint16_t size, void *dest_buffer);
void write_flash_parameter(uint16_t offset, uint16_t size, void *src_uffer);
void read_flash_table(uint32_t, void *, uint16_t);
void erase_flash_array(uint16_t);
void write_flash_array(uint32_t, uint8_t *, uint16_t);
void SST25WriteByte(uint32_t address, uint8_t data );
uint8_t SST25ReadByte(uint32_t);
FLASH_SETTINGS_T flash_settings;

#define  FIRST_FLASH_SETTINGS_ADDRESS           (250 * SST25_SECTOR_SIZE)
#define  SECOND_FLASH_SETTINGS_ADDRESS          (251 * SST25_SECTOR_SIZE)
#define  VALID_SETTINGS_PAGE_SIGN_ADDR  		(249 * 4096)

#define VALID_SETTINGS_SIGN            0xAA55AA55

/************************************************************************
* void SST25WriteByte(uint8_t data, uint32_t address)
*
* writes a byte to the address specified
*
*  address      [in]  address of the parameter
*  data         [in]  data to be written
*
************************************************************************/
void SST25WriteByte(uint32_t address, uint8_t data )
{
	uint8_t command_buffer[5];

	command_buffer[0] = SST25_BP;
    command_buffer[1] = WORD32_BYTE2(address);
    command_buffer[2] = WORD32_BYTE1(address);
    command_buffer[3] = WORD32_BYTE0(address);
    command_buffer[4] = data;

    send_spi_data(command_buffer, 5, NULL, 0, true);
}
/************************************************************************
* SST25ReadByte(uint32_t address)
*
* Reads a byte from the address specified
*
* address      [in]      address of the parameter
* temp         [out]     value
*
************************************************************************/
uint8_t SST25ReadByte(uint32_t address)
{
    uint8_t temp;
    uint8_t command_buffer[5];

    command_buffer[0] = SST25_READ;
    command_buffer[1] = WORD32_BYTE2(address);
    command_buffer[2] = WORD32_BYTE1(address);
    command_buffer[3] = WORD32_BYTE0(address);
    command_buffer[4] = 0;

    send_spi_data(command_buffer, 5, &temp, 1, true);

    return (temp);
}
/*************************************************************************/
SETTING_INFO_T settings_info[] =
{
	{ SERVER_AND_PORT_SETTING,       update_server_and_port_setting },
    { MESSAGE_PERIOD_SETTING,        update_message_period_setting },
	{ ROAMING_ACTIVATION,            update_roaming_setting },
	{ SMS_ACTIVATION,                update_sms_act_setting },
	{ SPEED_LIMIT_SETTING,           update_speed_limit_setting },
	{ ENGINE_BLOCKAGE_SETTING,       update_engine_blockage_setting},
	{ KM_COUNTER,                    update_km_counter_setting},
	{ DEVICE_RESET,                  reset_device },
//	{ SMS_SETTING,                   update_sms_setting },
	{ DEVICE_ID_SETTING,             update_device_id },
	{ DEVICE_STATUS_REQUEST,         request_device_status },
	{ UNCONTROLLED_ENGINE_BLOCKAGE,  uncontrolled_engine_blockage },
	{ LOCATION_REQUEST,              location_request },
	{ APN_SETTING,                   update_apn_setting },
//	{ ENGINE_OPERATION_SETTINGS,     update_engine_operation },
	{ CHANGE_PASSWORD,               update_password }
};
/*********************************************************************************/
uint8_t ParseConfigurationString(char *const buffer)
{
	COMMAND_TYPE_T command;
	uint8_t result;
	uint32_t i;

	command = Get_ConfigurationCommand(buffer);
	if(command > 0){
		for(i = 0; i < sizeof(settings_info) / sizeof(settings_info[0]); i++ ){
			if(command == settings_info[i].command){
				result = settings_info[i].update_callback(buffer);
				break;
			}
		}
		return result;
	}
	else
		return 0;
}
/***********************************************************************/
COMMAND_TYPE_T Get_ConfigurationCommand(char *buffer)
{
	 char *pTemp;

	 pTemp = strtok (buffer,";");
	 if(pTemp != NULL){
		 PRINT_K(buffer);
		 return (COMMAND_TYPE_T)atoi(buffer);
	 }
	 else
		 return 0;
}
/************************************************************************/
void Get_ConfigurationParameter(char const *in_buffer, char *out_buffer)
{
	char *pTemp;
	pTemp = strtok(NULL, ";");
	strcpy(out_buffer, pTemp);
}
/************************************************************************/
uint8_t update_server_and_port_setting(char const *buffer)
{
	char param_buffer[128];

	/* copy server ip address*/
	Get_ConfigurationParameter(buffer, param_buffer);
	strcpy(flash_settings.server_ip,  param_buffer);
	/* copy port number*/
	Get_ConfigurationParameter(buffer, param_buffer);
	strcpy(flash_settings.server_port, param_buffer);
	Update_Settings();
	return 0;
}
/*************************************************************************/
uint8_t update_message_period_setting(char const *buffer)
{
	char temp[16];

	Get_ConfigurationParameter(buffer, temp);
	PRINT_K("Updating message period settings...");
	if(strcmp(temp, "0") == 0) {
		Get_ConfigurationParameter(buffer, temp);
		flash_settings.msg_period_not_roaming_ignited = atoi(temp);
		PRINT_K(temp);
		Get_ConfigurationParameter(buffer, temp);
		flash_settings.msg_period_not_roaming_not_ignited = atoi(temp);
		PRINT_K(temp);
		Update_Settings();
	}
	else if(strcmp(temp, "1") == 0) {
		Get_ConfigurationParameter(buffer, temp);
		flash_settings.msg_period_roaming_ignited= atoi(temp);
		PRINT_K(temp);
		Get_ConfigurationParameter(buffer, temp);
		flash_settings.msg_period_roaming_not_ignited = atoi(temp);
		PRINT_K(temp);
		Update_Settings();
	}
	return 0;
}
/***********************************************************************/
uint8_t update_roaming_setting(char const *buffer)
{
	char temp[2];

	Get_ConfigurationParameter(buffer, temp);
	PRINT_K("Updating roaming settings...");
	if(strcmp(temp, "0") == 0){
		flash_settings.roaming_activation = FALSE;
		Update_Settings();
	}
	else if(strcmp(temp, "1") == 0){
		flash_settings.roaming_activation = TRUE;
		Update_Settings();
	}

	return 0;
}
uint8_t update_sms_act_setting(char const *buffer)
{
	char temp[2];

	PRINT_K("Updating sms settings...");

	Get_ConfigurationParameter(buffer, temp);
	if(strcmp(temp, "0") == 0){
		flash_settings.sms_activation = FALSE;
		Update_Settings();
	}
	else if(strcmp(temp, "1") == 0){
		flash_settings.sms_activation = TRUE;
		Update_Settings();
	}
	return 0;
}
uint8_t update_speed_limit_setting(char const *buffer)
{
	char temp[8];
	uint16_t u16_speedLimit;
	uint16_t u16_duration;

	PRINT_K("Updating speed limit settings...");

	Get_ConfigurationParameter(buffer, temp);
	u16_speedLimit = atoi(temp);
	flash_settings.speed_limit = u16_speedLimit;
	PRINT_K(temp);

	Get_ConfigurationParameter(buffer, temp);
	u16_duration = atoi(temp);
	flash_settings.speed_duration = u16_duration;
	PRINT_K(temp);

	Update_Settings();
	return 0;
}
uint8_t update_engine_blockage_setting(char const *buffer)
{
	char temp[2];

	Get_ConfigurationParameter(buffer, temp);
	if(strcmp(temp, "0") == 0){
		flash_settings.engine_blockage = FALSE;
		Update_Settings();
	}
	else if(strcmp(temp, "1") == 0){
		flash_settings.engine_blockage = TRUE;
		Update_Settings();
	}
	return 0;
}
uint8_t update_km_counter_setting(char const *buffer)
{
	char temp[128];

    PRINT_K("Updating mileage setting...");
	Get_ConfigurationParameter(buffer, temp);
	flash_settings.flash_mileage = atol(temp) / 10000;
	Update_Settings();
	return 0;
}
uint8_t reset_device(char const *buffer)
{
	char temp[2];
	Get_ConfigurationParameter(buffer, temp);
	if(strcmp(temp, "1") == 0)
		NVIC_SystemReset();
	return 0;
}
uint8_t update_device_id(char const *buffer)
{
	PRINT_K("Updating device id...");
	Get_ConfigurationParameter(buffer, flash_settings.device_id);
	Update_Settings();
	return 0;
}
uint8_t request_device_status(char const *buffer)
{
	PRINT_K("request device status...");
	return 2;
}
uint8_t uncontrolled_engine_blockage(char const *buffer)
{
	char temp[2];

	PRINT_K("Uncontrolled engine blockage...");
	Get_ConfigurationParameter(buffer, temp);
	if(strcmp(temp, "0") == 0){
		flash_settings.uncontrolled_blockage = FALSE;
		Update_Settings();
	}
	else if(strcmp(temp, "1") == 0){
		flash_settings.uncontrolled_blockage = TRUE;
		Update_Settings();
	}
	return 0;
}
uint8_t location_request(char const *buffer)
{
	char temp[2];
	PRINT_K("Location request...");
	Get_ConfigurationParameter(buffer, temp);
	return 1;
}
uint8_t update_apn_setting(char const *buffer)
{
	PRINT_K("Updating apn settings...");
	Get_ConfigurationParameter(buffer, flash_settings.flash_apn);
	Get_ConfigurationParameter(buffer, flash_settings.flash_apnusername);
	Get_ConfigurationParameter(buffer, flash_settings.flash_apnpassword);
	Update_Settings();
	return 0;
}
uint8_t update_password(char const *buffer)
{
	PRINT_K("Updating password...");
	Get_ConfigurationParameter(buffer, flash_settings.password);
	Update_Settings();
	return 0;
}
void Update_Settings()
{
	uint8_t *pFlashSettings;

	pFlashSettings = (uint8_t *)&flash_settings;

	SST25_EraseSector(FLASH_SETTINGS_ADDRESS / SST25_SECTOR_SIZE);
	SST25_WriteArray(pFlashSettings, sizeof(flash_settings), FLASH_SETTINGS_ADDRESS);

	PRINT_K("***SETTINGS UPDATED***");
}
void Load_Settings()
{
	uint32_t temp1;
	uint32_t temp2;
	uint32_t u32_validSign;
	uint8_t buffer[10];

	/* check if first 4 bytes of flash regions is empty */
	SST25_Read(FIRST_FLASH_SETTINGS_ADDRESS, 4, (uint8_t *)&temp1);
	SST25_Read(SECOND_FLASH_SETTINGS_ADDRESS, 4, (uint8_t *)&temp2);

	/* This section is only active in production programming */
	if((temp1 == 0xFFFFFFFF) && (temp2 == 0xFFFFFFFF) ){
		PRINT_K("***** WRITING FACTORY SETTINGS TO FLASH ********");
		strcpy(flash_settings.flash_apn, "triomobil_apn");
	    strcpy(flash_settings.flash_apnpassword, "apnpassword");
	    strcpy(flash_settings.flash_apnusername, "apnusername");
		strcpy(flash_settings.device_id, "1234567890ABCDE");
		strcpy(flash_settings.server_ip, "213.14.184.87");
		strcpy(flash_settings.server_port, "1555");
		strcpy(flash_settings.password, "password");
		flash_settings.uncontrolled_blockage = FALSE;
		flash_settings.engine_blockage = FALSE;
		flash_settings.sms_activation = FALSE;
		flash_settings.roaming_activation = FALSE;
		flash_settings.flash_mileage = 500;
		flash_settings.speed_limit = 100;
		flash_settings.msg_period_not_roaming_ignited = 1;
		flash_settings.msg_period_not_roaming_not_ignited = 2;
		flash_settings.msg_period_roaming_ignited= 3;
		flash_settings.msg_period_roaming_not_ignited = 4;

		SST25_WriteArray((uint8_t *)&flash_settings, sizeof(flash_settings), FIRST_FLASH_SETTINGS_ADDRESS);
		SST25_WriteArray((uint8_t *)&flash_settings, sizeof(flash_settings), SECOND_FLASH_SETTINGS_ADDRESS);
		u32_validSign = VALID_SETTINGS_SIGN;
		SST25_WriteArray((uint8_t *)&u32_validSign, 4, VALID_SETTINGS_PAGE_SIGN_ADDR);
	}

	SST25_Read(VALID_SETTINGS_PAGE_SIGN_ADDR, 4, (uint8_t *)&u32_validSign);
	if(u32_validSign == VALID_SETTINGS_SIGN){
		PRINT_K("Loading settings from page 250");
		SST25_Read(FIRST_FLASH_SETTINGS_ADDRESS, sizeof(flash_settings), (uint8_t *)&flash_settings);

	}
	else{
		PRINT_K("Loading settings from page 251");
		SST25_Read(SECOND_FLASH_SETTINGS_ADDRESS, sizeof(flash_settings), (uint8_t *)&flash_settings);
	}

		 PRINT_K(flash_settings.flash_apn);
		 PRINT_K(flash_settings.flash_apnpassword);
		 PRINT_K(flash_settings.flash_apnusername);
		 PRINT_K(flash_settings.device_id);
		 PRINT_K(flash_settings.server_ip);
		 PRINT_K(flash_settings.server_port);
		 PRINT_K(flash_settings.password);

		 itoa(flash_settings.uncontrolled_blockage, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.engine_blockage, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.sms_activation, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.roaming_activation , buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.flash_mileage, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.speed_limit, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.msg_period_not_roaming_ignited, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.msg_period_not_roaming_not_ignited, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.msg_period_roaming_ignited, buffer ,10);
		 PRINT_K(buffer);
		 itoa(flash_settings.msg_period_roaming_not_ignited, buffer ,10);
		 PRINT_K(buffer);

}
